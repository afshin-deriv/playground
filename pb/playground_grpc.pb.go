// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/v1/playground.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaygroundServiceClient is the client API for PlaygroundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaygroundServiceClient interface {
	ExecuteCode(ctx context.Context, opts ...grpc.CallOption) (PlaygroundService_ExecuteCodeClient, error)
}

type playgroundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaygroundServiceClient(cc grpc.ClientConnInterface) PlaygroundServiceClient {
	return &playgroundServiceClient{cc}
}

func (c *playgroundServiceClient) ExecuteCode(ctx context.Context, opts ...grpc.CallOption) (PlaygroundService_ExecuteCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaygroundService_ServiceDesc.Streams[0], "/playground.PlaygroundService/ExecuteCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &playgroundServiceExecuteCodeClient{stream}
	return x, nil
}

type PlaygroundService_ExecuteCodeClient interface {
	Send(*ExecuteRequest) error
	Recv() (*ExecuteResponse, error)
	grpc.ClientStream
}

type playgroundServiceExecuteCodeClient struct {
	grpc.ClientStream
}

func (x *playgroundServiceExecuteCodeClient) Send(m *ExecuteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playgroundServiceExecuteCodeClient) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaygroundServiceServer is the server API for PlaygroundService service.
// All implementations must embed UnimplementedPlaygroundServiceServer
// for forward compatibility
type PlaygroundServiceServer interface {
	ExecuteCode(PlaygroundService_ExecuteCodeServer) error
	mustEmbedUnimplementedPlaygroundServiceServer()
}

// UnimplementedPlaygroundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaygroundServiceServer struct {
}

func (UnimplementedPlaygroundServiceServer) ExecuteCode(PlaygroundService_ExecuteCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteCode not implemented")
}
func (UnimplementedPlaygroundServiceServer) mustEmbedUnimplementedPlaygroundServiceServer() {}

// UnsafePlaygroundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaygroundServiceServer will
// result in compilation errors.
type UnsafePlaygroundServiceServer interface {
	mustEmbedUnimplementedPlaygroundServiceServer()
}

func RegisterPlaygroundServiceServer(s grpc.ServiceRegistrar, srv PlaygroundServiceServer) {
	s.RegisterService(&PlaygroundService_ServiceDesc, srv)
}

func _PlaygroundService_ExecuteCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaygroundServiceServer).ExecuteCode(&playgroundServiceExecuteCodeServer{stream})
}

type PlaygroundService_ExecuteCodeServer interface {
	Send(*ExecuteResponse) error
	Recv() (*ExecuteRequest, error)
	grpc.ServerStream
}

type playgroundServiceExecuteCodeServer struct {
	grpc.ServerStream
}

func (x *playgroundServiceExecuteCodeServer) Send(m *ExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playgroundServiceExecuteCodeServer) Recv() (*ExecuteRequest, error) {
	m := new(ExecuteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaygroundService_ServiceDesc is the grpc.ServiceDesc for PlaygroundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaygroundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.PlaygroundService",
	HandlerType: (*PlaygroundServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteCode",
			Handler:       _PlaygroundService_ExecuteCode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/v1/playground.proto",
}
